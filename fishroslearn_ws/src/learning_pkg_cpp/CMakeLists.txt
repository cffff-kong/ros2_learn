cmake_minimum_required(VERSION 3.8)
project(learning_pkg_cpp)

if(CMAKE_COMPILER_IS_GNUCXX OR CMAKE_CXX_COMPILER_ID MATCHES "Clang")
  add_compile_options(-Wall -Wextra -Wpedantic)
endif()

# find dependencies
find_package(ament_cmake REQUIRED)
find_package(rclcpp REQUIRED)
# uncomment the following section in order to fill in
# further dependencies manually.
# find_package(<dependency> REQUIRED)

include_directories(include)

add_executable(node_cpp src/node_cpp.cpp)
add_executable(learn_functional src/learn_functional.cpp)
add_executable(learn_thread src/learn_thread.cpp)

# target_include_directories(node_cpp PUBLIC ${rclcpp_INCLUDE_DIRS})
# target_link_libraries(node_cpp ${rclcpp_LIBRARIES})
ament_target_dependencies(node_cpp rclcpp) #集成了链接头文件和库
ament_target_dependencies(learn_functional rclcpp) #集成了链接头文件和库
ament_target_dependencies(learn_thread rclcpp) #集成了链接头文件和库

# 拷贝到lib下 
install(TARGETS node_cpp learn_functional learn_thread
  DESTINATION lib/${PROJECT_NAME}
)

if(BUILD_TESTING)
  find_package(ament_lint_auto REQUIRED)
  # the following line skips the linter which checks for copyrights
  # comment the line when a copyright and license is added to all source files
  set(ament_cmake_copyright_FOUND TRUE)
  # the following line skips cpplint (only works in a git repo)
  # comment the line when this package is in a git repo and when
  # a copyright and license is added to all source files
  set(ament_cmake_cpplint_FOUND TRUE)
  ament_lint_auto_find_test_dependencies()
endif()

ament_package()
